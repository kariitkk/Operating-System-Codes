#include <stdio.h>
#define INF 1000000

struct process {
    int pid, at, bt, pr, ct, tat, wt, rt, is_completed;
};

void GanttChart(struct process p[], int sequence[], int n) {
    printf("\nGantt Chart\n ");
    for (int i = 0; i < n; i++) {
        printf("------");
    }
    printf("\n|");
    for (int i = 0; i < n; i++) {
        printf(" P%d |", p[sequence[i]].pid);
    }
    printf("\n ");
    for (int i = 0; i < n; i++) {
        printf("------");
    }
    printf("\n0");
    for (int i = 0; i < n; i++) {
        printf("    %d", p[sequence[i]].ct);
    }
    printf("\n");
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct process p[n];
    int sequence[n], seq_index = 0;

    printf("Enter Process ID, Arrival Time, Burst Time, and Priority (lower number = higher priority):\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        printf("PID: ");
        scanf("%d", &p[i].pid);
        printf("Arrival Time: ");
        scanf("%d", &p[i].at);
        printf("Burst Time: ");
        scanf("%d", &p[i].bt);
        printf("Priority: ");
        scanf("%d", &p[i].pr);
        p[i].is_completed = 0;
    }

    int completed = 0, current_time = 0;

    while (completed < n) {
        int highest_pr = INF, selected = -1;
        for (int i = 0; i < n; i++) {
            if (p[i].at <= current_time && !p[i].is_completed) {
                if (p[i].pr < highest_pr || (p[i].pr == highest_pr && p[i].at < p[selected].at)) {
                    highest_pr = p[i].pr;
                    selected = i;
                }
            }
        }

        if (selected == -1) {
            current_time++;
        } else {
            p[selected].rt = current_time - p[selected].at;
            p[selected].ct = current_time + p[selected].bt;
            p[selected].tat = p[selected].ct - p[selected].at;
            p[selected].wt = p[selected].tat - p[selected].bt;

            current_time = p[selected].ct;
            p[selected].is_completed = 1;
            sequence[seq_index++] = selected;
            completed++;
        }
    }

    GanttChart(p, sequence, seq_index);

    float total_tat = 0, total_wt = 0, total_rt = 0;
    int min_at = INF, max_ct = 0;

    printf("\nProcess\tAT\tBT\tPR\tCT\tTAT\tWT\tRT\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\n",
               p[i].pid, p[i].at, p[i].bt, p[i].pr, p[i].ct, p[i].tat, p[i].wt, p[i].rt);
        total_tat += p[i].tat;
        total_wt += p[i].wt;
        total_rt += p[i].rt;
        if (p[i].at < min_at) min_at = p[i].at;
        if (p[i].ct > max_ct) max_ct = p[i].ct;
    }

    float sl = max_ct - min_at;
    float th = (float)n / sl;

    printf("\nAverage Turnaround Time: %.2f\n", total_tat / n);
    printf("Average Waiting Time: %.2f\n", total_wt / n);
    printf("Average Response Time: %.2f\n", total_rt / n);
    printf("Schedule Length: %.2f\n", sl);
    printf("Throughput: %.2f process/unit time\n", th);

    return 0;
}
