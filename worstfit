#include <stdio.h>

int main() {
    int np, nb;

    printf("Enter number of Processes: ");
    scanf("%d", &np);
    printf("Enter number of Blocks: ");
    scanf("%d", &nb);

    int p[np], bn[np], frag[np];
    int b[nb], bf[nb];

    printf("Enter Process Sizes:\n");
    for(int i = 0; i < np; i++) {
        scanf("%d", &p[i]);
        bn[i] = -1; // Initialize block number as not allocated
        frag[i] = -1; // Fragmentation default
    }

    printf("Enter Block Sizes:\n");
    for(int i = 0; i < nb; i++) {
        scanf("%d", &b[i]);
        bf[i] = 0; // Initialize block as free
    }

    // Worst Fit Allocation
    for(int i = 0; i < np; i++) {
        int max_frag = -1;
        for(int j = 0; j < nb; j++) {
            if(bf[j] == 0 && b[j] >= p[i]) {
                int current_frag = b[j] - p[i];
                if(current_frag > max_frag) {
                    max_frag = current_frag;
                    bn[i] = j;
                }
            }
        }

        if(bn[i] != -1) {
            bf[bn[i]] = 1; // Mark block as allocated
            frag[i] = b[bn[i]] - p[i];
        }
    }

    // Print result
    printf("\nProcess No\tProcess Size\tBlock No\tBlock Size\tFragmentation\n");
    for(int i = 0; i < np; i++) {
        printf("%d\t\t%d\t\t", i + 1, p[i]);
        if(bn[i] != -1) {
            printf("%d\t\t%d\t\t%d\n", bn[i] + 1, b[bn[i]], frag[i]);
        } else {
            printf("Not Allocated\t-\t\t-\n");
        }
    }

    return 0;
}
